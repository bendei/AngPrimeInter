1.  jó kezdő leírások:
    https://testing-angular.com/angular-testing-principles/#angular-testing-principles
    https://testing-angular.com/testing-components/#componentfixture-and-debugelement   -- ez szépen leirja a Testing frameworkot- érdemes ezzel kezdeni
    interjú előtte érdemes átolvasni egyszer

2. AtivatedRoute stub : https://testing-angular.com/angular-testing-principles/#angular-testing-principles

 how to get and iterate over elements in DOM: https://attacomsian.com/blog/getting-dom-elements-javascript
 
 // css stylok alkalmazasa a templateben, foleg kondicionalisan:
 https://www.udemy.com/course/angular-course/learn/lecture/11765252#overview   -- ez nagyon jol elmagyarazza
 az angol Angular könyvben 253 oldal
 https://www.w3schools.com/cssref/css_selectors.asp

Die Angular CLI hat bereits Jasmine installiert und konfiguriert. Jasmine hat eine Syntax im Stil des Behavior Driven Development
(BDD). Man schreibt dabei Tests in natürlicher Sprache auf. Dies geschieht durch einfache Strings. 

Jasmin stellt folgende Methoden zu Verfügung:
- describe: definiert eine Sammlung von Spezifikationen ( es ist ein Test Suite). Diese Methode ist ein außere Methode, erste Argumnent
            beschreibt mit Worten was getestet wird ( Komponent name tc), 2. Argumnent ist eine Funktion die alle spec ( Tests)
            beinhaltet. 
- it: es ist die Spezifikation (=Test), 1. Argumnent ist eine kurze Beschreibung der Spezifikation, 2. Arg ist eine Funktion, die 
      die Spezifikation selbst implementiert. Hat immer ein oder mehrere Bedingungen expect()die geprüft werden. 
- expect: 
- afterEach / beforeEach: wird nach / vor jeder Spezifikation ausgeführt.
- afterAll / beforeAll: wird nur einaml vor / nach allen Spezifikationen ausgeführt.

Diese tests werden im Test-Runner Karma ausgeführt. Karma führt die Unit Test aus, verwendet dafür ein Browser und einen eigenen Webserver. 

TestBed: wenn component hat Abhängigkeiten, oder der View sollte auch im Testen mitbezogen.
TestBed.configureTestingModule empfängt ein Konfigurationsobjekt mit declarations, imports, providers property Metadatas
TestBed emuliert NgModule ( AppModule), über das wir die Umgebung konfigurieren und inizialisieren. 
  TestBed.configureTestingModule({
            declarations: [BookDetailsComponent], 
            imports: [ReactiveFormsModule, SharedModule],
            providers: ...
              })
        .compileComponents().then( () => {
            fixture = TestBed.createComponent(BookDetailsComponent);
            el = fixture.debugElement;
            component = fixture.componentInstance;
            ds = TestBed.inject(RestDataSource);
            activatedRoute = TestBed.inject(ActivatedRoute);
            router = TestBed.inject(Router);
            loggerSpy = TestBed.inject(NGXLogger);
            formBuilder = TestBed.inject(FormBuilder);
    
            component.ngOnInit();
        });

 beforeEach(waitForAsync(() ... Mithilfe von async() erstellen wir eine Zone, die mit der Ausführung des nächsten Blocks so lange wartet, bis alle asynchronen Aufgaben der Zone abgeschlossen sind.
  Dies ist sehr hilfreich, um Tests mit asynchronem Code übersichtlicher zu gestalten. Im konkreten Fall benötigt compileComponents() ein wenig Zeit, um die Komponenten bereitzustellen, 
  was dank async() aber kaum auffällt
  

 https://angular.io/guide/testing-components-scenarios
 https://www.portiva.nl/portiblog/blogs-cat/3-levels-of-css-selectors-to-select-all-elements
 https://attacomsian.com/blog/getting-dom-elements-javascript

https://www.mobiquity.com/insights/testing-angular-http-communication
https://testing-angular.com/testing-components/#black-vs-white-box-component-testing

- nativeElement returns a reference to the DOM element
- DebugElement is an Angular2 class that contains all kinds of references and methods relevant to investigate an element or component

nativeElement only helps you when you want to investigate the DOM (are attributes, classes, ... set or cleared or maybe dispatch DOM events).
 When you want to investigate the state of parts of the Angular2 application (components, directives, ...) then you need DebugElement

abstract class ComponentFixture {
  debugElement;       // test helper 
  componentInstance;  // access properties and methods
  nativeElement;      // access DOM
  detectChanges();    // trigger component change detection
}

DebugElement is a wrapper across native elements and tested component allowing test to run on all supported platforms.

fixture.nativeElement and fixture.debugElement.nativeElement are the same things. This is HTML element generated in the DOM by Angular as specified in the tested component's template. Through nativeElement you can access and test what visualized on the screen, in your test above whether the text content of the H1 is Welcome to the app. Keep in mind fixture.debugElement has other methods and properties that are useful in tests like By.css() for example.

fixture.componentInstance gives you access to the component class. This allows you to test the public API of your component. In you test above you are whether the title property of you app component is app.



